<?xml version="1.0" encoding="UTF-8"?>
<!--scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="10 seconds">

    <contextName>JPANAME</contextName>

    <property name="log.path" value="/home/subwaylogs/logs"/>
    <!--登录日志路径-->
    <property name="log.loginPath" value="/home/subwaylogs/logs/loginLogs"/>
    <property name="server.name" value="subway-data-manage-log"/>
    <property name="server.loginName" value="subway-data-manage-loginLog"/>
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
    <!--输出到文件格式-->
    <property name="log.pattern2" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>
    <!--登录日志名-->
    <property name="log.loginFile" value="${log.loginPath}/${server.loginName}.%d{yyyyMMdd}.%i.log.gz"/>
    <property name="log.file" value="${log.path}/${server.name}.%d{yyyyMMdd}.%i.log.gz"/>
    <!--0. 日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 ，输出到控制台格式-->
    <property name="log.pattern"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <appender name="fileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern2}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${log.file}</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>

            <maxFileSize>50MB</maxFileSize>
        </rollingPolicy>
        <ImmediateFlush>true</ImmediateFlush>
    </appender>
    <appender name="login-log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern2}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${log.loginFile}</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>

            <maxFileSize>50MB</maxFileSize>
        </rollingPolicy>
        <ImmediateFlush>true</ImmediateFlush>
    </appender>
    <logger name="com.gzmu.lpzyf.controller.LoginController">
        <appender-ref ref="login-log"></appender-ref>
    </logger>
    <appender name="asyncFileAppender" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>5000</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>false</includeCallerData>
        <appender-ref ref="fileAppender"/>
    </appender>

    <!--这里可以不写-->
    <logger name="com.feng" level="INFO"></logger>

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="asyncFileAppender"/>
        <appender-ref ref="console"/>
    </root>
</configuration>

